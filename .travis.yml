---
sudo: required
dist: trusty
language: node_js
cache:
  directories:
    - $HOME/.npm
    - $HOME/.yarn-cache
    - node_modules
node_js:
- '4.3.2'

install:
  # install yarn to create archives for lambda functions
  - npm install -g yarn@">=0.16.0" --cache-min 999999999
  # install aws cli
  - sudo apt-get -y install python-pip
  - sudo pip install awscli
  - aws --version
  # install terraform
  - wget https://releases.hashicorp.com/terraform/0.7.6/terraform_0.7.6_linux_amd64.zip -O /tmp/terraform.zip
  - sudo unzip -d /usr/local/bin/ /tmp/terraform.zip

before_script:
  - export AWS_REGION=${AWS_DEFAULT_REGION}
  - export ENV=$(echo "${TRAVIS_BRANCH}" | perl -ne "print $& if /(?<=deploy\/).*/")
script:
  - |
    if [ -z "${ENV}" ]; then
      echo "${TRAVIS_BRANCH} is not a branch to deploy."
    else
      ./terraform-env.sh ${ENV} get
      ./terraform-env.sh ${ENV} plan
    fi

before_deploy:
  # Save current output to use it later
  - ./terraform-env.sh ${ENV} output | tee out_before

deploy:
  - provider: script
    script: ./terraform-env.sh ${ENV} apply
    skip_cleanup: true
    on:
      branch: deploy/*

after_deploy:
  # Publish to SNS Topic if web_ami was updated.
  - ./terraform-env.sh ${ENV} output | tee out_after
  - lines=$(cat out_before out_after | grep 'web_ami' | uniq | wc -l)
  - asg_name=$(grep "web_asg_name" out_after | awk -F ' = ' '{print $2}')
  - account_number=$(aws sts get-caller-identity --output text --query 'Account')
  - |
    if [ ${lines} -eq 2 ]; then
      aws sns publish --topic-arn "arn:aws:sns:${AWS_REGION}:${account_number}:asg_image_updated" \
         --message "{\"asgName\": \"${asg_name}\"}"
    fi
