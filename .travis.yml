---
sudo: required
dist: trusty
language: ruby
rvm:
  - 2.3.0
cache:
  directories:
  - vendor/bundle

install:
  - gem install travis -v 1.8.2 --no-rdoc --no-ri
  - bundle install
  # install aws cli
  - sudo apt-get -y install python-pip
  - sudo pip install awscli
  - aws --version
  # install terraform
  - wget https://releases.hashicorp.com/terraform/0.7.6/terraform_0.7.6_linux_amd64.zip -O /tmp/terraform.zip
  - sudo unzip -d /usr/local/bin/ /tmp/terraform.zip

before_script:
  - export AWS_REGION=${AWS_DEFAULT_REGION}
  - export TF_VAR_aws_region=${AWS_DEFAULT_REGION}
script:
  # If branch name matched with deploy/xxx, then continue.
  - export ENV=$(echo "${TRAVIS_BRANCH}" | perl -ne "print $& if /(?<=deploy\/).*/")
  - |
    if [ -z "${ENV}" ]; then
      echo "${TRAVIS_BRANCH} is not a branch to deploy."
    else
      ./terraform-env.sh ${ENV} get
      ./terraform-env.sh ${ENV} plan
    fi

# TODO I want to make it deploy. But my ruby and travis's ruby make conflicts...
after_success:
  # If branch name matched with deploy/xxx, then continue.
  - export ENV=$(echo "${TRAVIS_BRANCH}" | perl -ne "print $& if /(?<=deploy\/).*/")
  - if [ -z "${ENV}" ]; then echo "${TRAVIS_BRANCH} is not a branch to deploy."; exit 0; fi
  # Save current output to use it later
  - ./terraform-env.sh ${ENV} output | tee out_before
  # Apply
  - ./terraform-env.sh ${ENV} get
  - ./terraform-env.sh ${ENV} apply
  # Remove unused amis
  - ruby scripts/remove_unused_and_rotated_amis.rb
  # Replace instances if web_ami was updated.
  - ./terraform-env.sh ${ENV} output | tee out_after
  - lines=$(cat out_before out_after | grep 'web_ami' | uniq | wc -l)
  - asg_name=$(grep "web_asg_name" out_after | awk -F ' = ' '{print $2}')
  - test ${lines} -eq 2 && ruby scripts/replace_old_instances.rb ${asg_name}

